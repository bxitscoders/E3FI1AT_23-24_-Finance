//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Entity Framework EntityObject template.
// Code is generated on: 29.11.2023 09:27:54
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

#nullable disable

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Data.Entity;
using System.Data.Entity.Core;
using System.Data.Entity.Core.EntityClient;
using System.Data.Entity.Core.Metadata.Edm;
using System.Data.Entity.Core.Objects;
using System.Data.Entity.Core.Objects.DataClasses;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using Microsoft.Extensions.Configuration;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("Model", "account_FK", "User", RelationshipMultiplicity.One, typeof(Model.User), "Accounts", RelationshipMultiplicity.Many, typeof(Model.Account), true)]
[assembly: EdmRelationshipAttribute("Model", "possession_ibfk_1", "Shares", RelationshipMultiplicity.One, typeof(Model.Shares), "Possessions", RelationshipMultiplicity.Many, typeof(Model.Possession), true)]
[assembly: EdmRelationshipAttribute("Model", "possession_ibfk_2", "Account", RelationshipMultiplicity.One, typeof(Model.Account), "Possessions", RelationshipMultiplicity.Many, typeof(Model.Possession), true)]
[assembly: EdmRelationshipAttribute("Model", "shareValue_ibfk_1", "Shares", RelationshipMultiplicity.One, typeof(Model.Shares), "Sharevalues", RelationshipMultiplicity.Many, typeof(Model.Sharevalue), true)]

#endregion

namespace Model
{

    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class Entities : ObjectContext
    {
        #region Constructors

        /// <summary>
        /// Initialize a new Entities object.
        /// </summary>
        public Entities() :
                base(GetConnectionString("EntitiesConnectionString"), "Entities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }

        /// <summary>
        /// Initializes a new Entities object using the connection string found in the 'Entities' section of the application configuration file.
        /// </summary>
        public Entities(string connectionString) :
                base(connectionString, "Entities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }

        /// <summary>
        /// Initialize a new Entities object.
        /// </summary>
        public Entities(EntityConnection connection) : base(connection, "Entities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }

        private static string GetConnectionString(string connectionStringName)
        {
            var configurationBuilder = new ConfigurationBuilder().AddJsonFile("appsettings.json", optional: true, reloadOnChange: false);
            var configuration = configurationBuilder.Build();
            return configuration.GetConnectionString(connectionStringName);
        }

        #endregion

        #region Partial Methods

        partial void OnContextCreated();

        #endregion

        #region ObjectSet Properties

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Account> Account
        {
            get
            {
                if ((_Account == null))
                {
                    _Account = base.CreateObjectSet<Account>("Account");
                }
                return _Account;
            }
        }
        private ObjectSet<Account> _Account;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Apidetails> Apidetails
        {
            get
            {
                if ((_Apidetails == null))
                {
                    _Apidetails = base.CreateObjectSet<Apidetails>("Apidetails");
                }
                return _Apidetails;
            }
        }
        private ObjectSet<Apidetails> _Apidetails;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Financetransaction> Financetransaction
        {
            get
            {
                if ((_Financetransaction == null))
                {
                    _Financetransaction = base.CreateObjectSet<Financetransaction>("Financetransaction");
                }
                return _Financetransaction;
            }
        }
        private ObjectSet<Financetransaction> _Financetransaction;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Possession> Possession
        {
            get
            {
                if ((_Possession == null))
                {
                    _Possession = base.CreateObjectSet<Possession>("Possession");
                }
                return _Possession;
            }
        }
        private ObjectSet<Possession> _Possession;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Shares> Shares
        {
            get
            {
                if ((_Shares == null))
                {
                    _Shares = base.CreateObjectSet<Shares>("Shares");
                }
                return _Shares;
            }
        }
        private ObjectSet<Shares> _Shares;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Sharevalue> Sharevalue
        {
            get
            {
                if ((_Sharevalue == null))
                {
                    _Sharevalue = base.CreateObjectSet<Sharevalue>("Sharevalue");
                }
                return _Sharevalue;
            }
        }
        private ObjectSet<Sharevalue> _Sharevalue;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<User> User
        {
            get
            {
                if ((_User == null))
                {
                    _User = base.CreateObjectSet<User>("User");
                }
                return _User;
            }
        }
        private ObjectSet<User> _User;

        #endregion
        #region AddTo Methods

        /// <summary>
        /// Deprecated Method for adding a new object to the Account EntitySet.
        /// </summary>
        public void AddToAccount(Account account)
        {
            base.AddObject("Account", account);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the Apidetails EntitySet.
        /// </summary>
        public void AddToApidetails(Apidetails apidetails)
        {
            base.AddObject("Apidetails", apidetails);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the Financetransaction EntitySet.
        /// </summary>
        public void AddToFinancetransaction(Financetransaction financetransaction)
        {
            base.AddObject("Financetransaction", financetransaction);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the Possession EntitySet.
        /// </summary>
        public void AddToPossession(Possession possession)
        {
            base.AddObject("Possession", possession);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the Shares EntitySet.
        /// </summary>
        public void AddToShares(Shares shares)
        {
            base.AddObject("Shares", shares);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the Sharevalue EntitySet.
        /// </summary>
        public void AddToSharevalue(Sharevalue sharevalue)
        {
            base.AddObject("Sharevalue", sharevalue);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the User EntitySet.
        /// </summary>
        public void AddToUser(User user)
        {
            base.AddObject("User", user);
        }

        #endregion
    }
}
