//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Entity Framework EntityObject template.
// Code is generated on: 13.11.2023 13:35:21
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Data.Entity.Core.EntityClient;
using System.Data.Entity.Core.Metadata.Edm;
using System.Data.Entity.Core.Objects;
using System.Data.Entity.Core.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

namespace Model
{

    /// <summary>
    /// There are no comments for Model.User in the schema.
    /// </summary>
    /// <KeyProperties>
    /// ID
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="Model", Name="User")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class User : EntityObject    {
        #region Factory Method

        /// <summary>
        /// Create a new User object.
        /// </summary>
        /// <param name="iD">Initial value of ID.</param>
        /// <param name="vorname">Initial value of Vorname.</param>
        /// <param name="kontoFK">Initial value of KontoFK.</param>
        public static User CreateUser(int iD, string vorname, int kontoFK)
        {
            User user = new User();
            user.ID = iD;
            user.Vorname = vorname;
            user.KontoFK = kontoFK;
            return user;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int ID
        {
            get
            {
                int value = _ID;
                OnGetID(ref value);
                return value;
            }
            set
            {
                if (_ID != value)
                {
                  OnIDChanging(ref value);
                  ReportPropertyChanging("ID");
                  _ID = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("ID");
                  OnIDChanged();
              }
            }
        }
        private int _ID;
        partial void OnGetID(ref int value);
        partial void OnIDChanging(ref int value);
        partial void OnIDChanged();
    
        /// <summary>
        /// There are no comments for Vorname in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string Vorname
        {
            get
            {
                string value = _Vorname;
                OnGetVorname(ref value);
                return value;
            }
            set
            {
                if (_Vorname != value)
                {
                  OnVornameChanging(ref value);
                  ReportPropertyChanging("Vorname");
                  _Vorname = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("Vorname");
                  OnVornameChanged();
              }
            }
        }
        private string _Vorname;
        partial void OnGetVorname(ref string value);
        partial void OnVornameChanging(ref string value);
        partial void OnVornameChanged();
    
        /// <summary>
        /// There are no comments for Nachname in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string Nachname
        {
            get
            {
                string value = _Nachname;
                OnGetNachname(ref value);
                return value;
            }
            set
            {
                if (_Nachname != value)
                {
                  OnNachnameChanging(ref value);
                  ReportPropertyChanging("Nachname");
                  _Nachname = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("Nachname");
                  OnNachnameChanged();
              }
            }
        }
        private string _Nachname;
        partial void OnGetNachname(ref string value);
        partial void OnNachnameChanging(ref string value);
        partial void OnNachnameChanged();
    
        /// <summary>
        /// There are no comments for KontoFK in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int KontoFK
        {
            get
            {
                int value = _KontoFK;
                OnGetKontoFK(ref value);
                return value;
            }
            set
            {
                if (_KontoFK != value)
                {
                  OnKontoFKChanging(ref value);
                  ReportPropertyChanging("KontoFK");
                  _KontoFK = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("KontoFK");
                  OnKontoFKChanged();
              }
            }
        }
        private int _KontoFK;
        partial void OnGetKontoFK(ref int value);
        partial void OnKontoFKChanging(ref int value);
        partial void OnKontoFKChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for Konto in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Model", "FK_Konto_User", "Konto")]
        public virtual Konto Konto
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Konto>("Model.FK_Konto_User", "Konto").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Konto>("Model.FK_Konto_User", "Konto").Value = value;
            }
        }
    
        /// <summary>
        /// There are no comments for Konto in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Konto> KontoReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Konto>("Model.FK_Konto_User", "Konto");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Konto>("Model.FK_Konto_User", "Konto", value);
                }
                else
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Konto>("Model.FK_Konto_User", "Konto").Value = null;
                }
            }
        }

        #endregion
    }

}
